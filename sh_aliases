if [ `uname` = "Darwin" ];then
    alias edit='open -a "Visual Studio Code"'
    alias gitkr='/Applications/GitKraken.app/Contents/MacOS/GitKraken'
    gitkr_open()
    {
        if [ $# -ne 1 ];then
            echo "usage: gitkr_open /path/to/git/repo"
            return
        fi
        /Applications/GitKraken.app/Contents/MacOS/GitKraken -p $1 &
    }
    alias readelf='objdump'
    alias cat='bat'
elif [ `uname` = "Linux" ];then
    if [ -x /usr/share/code/code ];then
        alias edit='/usr/share/code/code'
    else
        which vi &>/dev/null
        if [ $? -eq 0 ];then
            alias edit='vi'
        else
            echo "sudo apt update && sudo apt install vim"
        fi
    fi
    if [ `uname -p` = "aarch64" ];then
        which bat &>/dev/null
        if [ $? -eq 0 ];then
            alias cat='bat'
        else
            echo "bat or batcat may not be available from apt"
        fi
    else
        which batcat &>/dev/null
        if [ $? -eq 0 ];then
            alias cat='batcat'
        else
            echo "sudo apt update && sudo apt install bat"
        fi
    fi
fi

export TXTRED=$(tput setaf 1) # Red
export TXTGRN=$(tput setaf 2) # Green
export TXTRST=$(tput sgr0) # Text reset.

#reset built-in commands

which trash &>/dev/null
if [ $? -eq 0 ];then
    alias rm='trash'
else
    echo "sudo apt update && sudo apt install trash-cli"
fi
alias mkdir='mkdir -p'
alias less='less -N'
alias grep='grep --color=always'
alias grepn='grep -n'
alias tail='tail -f'

#apt
alias aptsearch='apt-cache search'
alias sau='sudo apt update'
alias sai='sudo apt install'
alias dlg='dpkg -l|grep'

#file system
alias latr='ls -latr'
alias ltr='ls -ltr'
alias lt='ls -lt'

#shell updates
shellname=$(basename $(readlink /proc/$$/exe))
alias ec='edit ~/.${shellname}rc'
alias sc='source ~/.${shellname}rc'
alias vc='cat ~/.${shellname}rc'
alias ea='edit ~/.${shellname}_aliases'
alias va='cat ~/.${shellname}_aliases'
alias es='edit ~/workspace_tools/start_docker.sh'
alias vs='cat ~/workspace_tools/start_docker.sh'
#http://zsh.sourceforge.net/FAQ/zshfaq03.html
alias ssplit='setopt shwordsplit'
alias usplit='unsetopt shwordsplit'

#ros2
alias rmbil='rm -rf build;rm -rf log; rm -rf install*'
alias rmbi='rm -rf build; rm -rf install*'
source_ros2()
{
    rosdistro="foxy"
    while getopts ":d:h" opt; do
    case ${opt} in
        d )
            rosdistro=$OPTARG
        ;;
        h ) printf "options:\n [-d] rosdistro (default is foxy)\n"
        return
        ;;
    esac
    done

    source /opt/ros/$rosdistro/setup.${shellname}
}
if [ -d /opt/ros ];then
    for ros_distro_dir in /opt/ros/*
    do
            ros_distro=$(basename $ros_distro_dir)
            alias $ros_distro="source /opt/ros/$ros_distro/setup.zsh"
    done
fi
alias rviz2='rviz2 &>/dev/null&'
alias sinstall='source install/setup.${shellname}'
alias getrepos='vcs import src <'
alias getdepends='sau && rosdep update && rosdep install -y -r --from-paths . --ignore-src --rosdistro foxy'
alias r='ros2'
alias rai='r action info'
alias ral='r action list'
alias ras='r action send_goal'
alias rbi='r bag info'
alias rbp='r bag play'
alias rbr='r bag record'
alias rda='r daemon start'
alias rdo='r daemon stop'
alias rdkill='pkill -f "_ros2_daemon"'
alias ris='r interface show'
alias rl='r launch'
alias rni='r node info'
alias rnl='r node list'
alias rpg='r param get'
alias rpl='r param list'
alias rps='r param set'
alias rr='r run'
alias rrg="rr --prefix 'gdb -ex run --args'"
alias pj='r run plotjuggler plotjuggler'
alias rsc='r service call'
alias rsf='r service find'
alias rsl='r service list'
alias rst='r service type'
alias rte='r topic echo'
alias rti='r topic info'
alias rtiv='rti -v'
alias rtl='r topic list'
alias rtp='r topic pub'
alias rtt='r topic type'


#docker
alias dps='docker ps -a'
alias dr='docker run -it --rm'
docker_volume()
{
    host_path=$1
    containter_path=$2
    set -- "${@:3}"
    dr -v $host_path:$containter_path $@
}
alias drv='docker_volume'
alias de='docker exec -it'
alias di='docker images'
alias dst='docker stop'
alias drm='docker rm'
alias drmi='docker rmi'
alias dpwd="docker inspect -f '{{ .Mounts}}'"
alias dinu='docker rmi $(docker images -f "dangling=true" -q)'
alias dcp='docker container prune'
alias dip='docker image prune'

ignore()
{
    file_path="."
    command="echo"
    while getopts ":p:rah" opt; do
    case ${opt} in
        p )
            file_path=$OPTARG
        ;;
        r )
            command="rm"
        ;;
        a )
            command="touch"
        ;;
        h ) echo "options: [-p] path/to/start [-r] (remove ignore files) [-a] (add ignore files)"
        return
        ;;
    esac
    done

    for x in $(find $file_path -name "package.xml"); do
        ignore_path=$(dirname $x)
        eval ${command} $ignore_path/COLCON_IGNORE
        eval ${command} $ignore_path/AMENT_IGNORE
    done
}

addignore()
{
    ignore -a $@
}

rmignore()
{
    ignore -r $@
}

findignore()
{
    find . -name "*IGNORE"
}

le()
{
    # set -x
    command=$1
    # echo "#="$#
    if [ $# -lt 1 ];then
        echo "usage: ${command}e [dir] first_ext second_ext ..."
        echo "ex: ${command}e cpp hpp h c"
        echo "ex: ${command}e . cpp hpp h c"
        return
    fi

    directory="."
    if [ -d $2 ];then
        echo $2" is a dir"
        directory=$2
        set -- "${@:3}"
    else
        set -- "${@:2}"
    fi

    for var in "$@"
    do
        # echo "$var"
        eval ${command} $directory"/**/*."$var

    done
}
alias lle='le ll'
alias lse='le ls'

find_common_ext()
{
    list_extension_option="ls"
    path_to=""
    extenstion_set=""
    while getopts ":hl:p:e:" opt; do
    case ${opt} in
        l )
            list_extension_option=$OPTARG
        ;;
        p )
            path_to=$OPTARG
        ;;
        e )
            extenstion_set=$OPTARG
        ;;
        h )
            printf "options:\n [l] list form\n [p] path to search\n [e] extension set"
            return
        ;;
    esac
    done

   le $list_extension_option $path_to $extenstion_set|sort
}

alias findcpp='find_common_ext -e "cpp c hpp h"'
alias findpy='find_common_ext -e "py pyc pyo"'
alias findsrc='(findcpp&&findpy)'
alias findcmake='find . -type f -name "CMakeLists.txt" -o -name "*.cmake*"|sort'
alias findsyml='ls -lR . | grep ^l'
alias findgit='find . -name ".git"|sort'
alias findpack='find . -name "package.xml"|sort'
alias findchange='find . -name "CHANGELOG.rst"|sort'
alias findfile='find . -type f'
alias findexec='find . -type f -executable'
alias xg='xargs grep'
alias xgl='xg -l'
alias xgli='xgl -i'
alias xglp='|xgl'
alias xglip='|xgli'

#https://stackoverflow.com/questions/48341920/git-branch-command-behaves-like-less
git config --global pager.branch false
git config --global pager.show false
alias gcleani='git clean -ifdx'
alias gal='alias|grep git|less'
alias galg='gal|grep'
alias gshs='gsh -s'
all_git_repos()
{
    runcommand=""
    pipe=""
    while getopts ":hspbBSHrc:" opt; do
    case ${opt} in
        s )
            runcommand="custom -n --args status -s"
        ;;
        p )
            runcommand="remotes -n"
        ;;
        b )
            runcommand="custom -n --args branch -a"
        ;;
        B )
            runcommand="branch -n"
        ;;
        S )
            runcommand="custom -n --args show -s"
        ;;
        H )
            runcommand="custom -n --args show -s"
            pipe="|grep -B 1 commit"
        ;;
        r )
            runcommand="custom -n --args log -1 --reverse --oneline"
        ;;
        c )
            runcommand="custom -n --args "$OPTARG
        ;;
        h )
            printf "options:\n [-b] branches\n [-B] current branch\n [-c] run custom vcs command (use double quotes for spaces)\n [-H] show hashes\n [-p] paths\n [-r] log reverse\n [-s] status\n [-S] show\n"
            return
        ;;
    esac
    done

    echo -e "${TXTGRN}vcs $runcommand$pipe${TXTRST}"
    eval vcs $runcommand$pipe
}

#https://github.com/sympy/sympy/wiki/Git-hg-rosetta-stone
hg()
{
#    echo $@
    if [ "$@" = "paths" ]; then
        echo "git remote -v"
        git remote -v
    elif [ "$@" = "status" ]; then
        echo "git status"
        git status
    elif [ "$@" = "push" ]; then
        echo "git push"
        git push
    elif [ "$@" = "pull" ]; then
        echo "git fetch"
        git fetch
    elif [ "$@" = "revert -a" ]; then
        echo "git reset --hard"
        git reset --hard
    elif [ "$@" = "revert" ]; then
        echo "git reset"
        git reset
    elif [ "$@" = "update" ]; then
        echo "git checkout"
        git checkout
    elif [ "$@" = "branches" ]; then
        echo "git branch -a"
        git branch -a
    elif [ "$@" = "branch" ]; then
        echo "git rev-parse --abbrev-ref HEAD"
        git rev-parse --abbrev-ref HEAD
    elif [ "$@" = "backout" ]; then
        echo "git revert"
        git revert
    elif [ "$@" = "summary" ]; then
        echo "git show -s"
        git show -s
    elif [ "$@" = "id" ]; then
    	echo "git describe --abbrev=12 --always --dirty=+"
    	git describe --abbrev=12 --always --dirty=+
    elif [ "$@" = "id2" ]; then
	    echo "git rev-parse HEAD"
	    git rev-parse HEAD
    fi
}

printlines()
{
    if [ $# -ne 3 ];then
        echo "usage: printlines firstline secondline filename"
        return
    fi
    sed -n "${1},${2}p" $3
}

printline()
{
    if [ $# -ne 2 ];then
        echo "usage: printline linenum filename"
        return
    fi
    printlines $1 $1 $2
}
